<<<<<<< HEAD
---
layout: post
title:  "프로그래밍 언어론 챕터 1"
date:   2022-04-07 14:49:24 +0900
categories: 프로그래밍언어론
---
## Chapter 1 Topics
- Reasons for Studying Concepts of Programming Languages<br>프로그래밍 언어론을 배우는 이유
- Programming Domains<br>프로그래밍 도메인
- Language Evaluation Criteria<br>프로그래밍 언어 평가 기준
- Influence on Language Design<br>언어 디자인에 대한 영향
- Language Categories<br>언어 카테고리
- Language Design Trade-Offs<br>언어 디자인 트레이드오프
---
## Reasons for Studying Concepts of Programming Language
- Increased ability to express ideas
<br>생각을 표현하기 위한 능력이 향상되었음
- Improved background for choosing appropriate languages
<br>적절한 언어를 고르기 위한 향상된 배경
- Better ability to learn new languages
<br>새로운 언어를 배우기 위한 더 좋은 능력
- Better used of languages that are already known
<br>이미 알려진 언어들의 더 좋은 사용
- Overall advancement of computing
<br>컴퓨팅의 총체적인 발전
---
## Programing Domains
- Scientific applicaitions<br>과학적 이용
    - Large numbers of floating point computations; use of arrays<br>다수의 부동 소수점 계산
    - cf) 포트란
- Business applications<BR>비즈니스적 이용
    - Produce reports, use decimal numbers and characters<br>보고서를 생성하고, 십진수 및 문자 사용
    - cf) COBOL
- Artificial Intelligence<br>인공지능
    - Symbols rather than numbers manipulated; use of linked lists
    <br>숫자보다는 기호 조작, 연결된 리스트 사용
    - LISP
- Systems Programming<br>시스템 프로그래밍
    - 지속된 사용으로 인해 효율성 필요
    - C언어
- Web Software<br>웹 소프트웨어
    - 다양한 언어들의 모음: 마크업(cf HTML)
    - 스크립팅(PHP)
    - 범용(자바)

---

## Language Evaluation Criteria
- ### Readability(가독성)
    - 프로그램을 읽고 이해할 수 있는 용이성
- ### Writability(작문법)
    - 언어를 사용하여 프로그램을 만들 수 있는 용이성
- ### Reliability(안정성)
    - 규격의 적합성
- ### Cost(비용)
    - 전체적이고 궁극적인 비용
---
## Evaluation Criteria : Readability
- ### Overall Simplicity<br>총체적인 단순성
    - 관리 가능한 구조 및 기능 조합
    - 최소 형상 다중성
    - 최소 연산자 오버로드(복잡하면 안됨)
    - ex) c++, ++c 전, 후위 연산자, 운영체제에 따른 포인터 바이트 수의 증감
- ### Orthogonality(직교성)
    - 서로 다른 것들끼리 상관성이 존재하지 않으며, 같은 것들끼리 예외성이 없는 것
    - 상대적으로 작은 원시적 구조들의 집합은 상대적으로 적은 수의 방법으로 결합될 수 있다는 것.
    - 풀어서 이야기하자면, 기능들이 겹치지 않아야 하고 동일한 작업을 수행하는 기능들이 많다면 직교성이 낮은 것이도, 동일한 기능을 하나의 명령어로만 수행한다면 직교성이 높은 것이다.
    - ex) + 기호는 정수, 부동소수점 연산 모두에서 두 수를 더하는 의미를 지닌다.(직교성 예시)
    - ex2) C언어에서 함수는 리턴타입을 가지지만 배열은 될 수 없다, 파라미터로 배열만 call by refence 사용.(직교성 위배)
- ### Data Types
    - 충분한 수의 데이터타입들이 있어야 함
- ### Syntax Considerations(구문 고려사항)
    - 식별자 형태는 유연해야 함
    - 복합문을 형성하는 특수 단어 및 방법
    - 특별한 단어를 사용하여 구문을 묶어주는 것(if, while, for 등)<br>또한 {} 등을 사용하여 가독성을 높이는 것도 포함된다.
## Evaluation Criteria : Writability
- Simplicity and Orthogonality
    – Few constructs, a small number of primitives, a small set of rules for combining them<br>적은 숫자의 구성요소들과 이들을 묶는 단순한 규칙
- Support for abstraction : 추상성 지원
    - 세부 정보를 무시할 수 있는 방식으로 복잡한 스트럭쳐 및 작업을 정의하고 사용할 수 있는 기능
    - cf) 프로세스를 추상화한 형태 : subprogram<br>
    data를 추상화한 형태 : 바이너리 트리
    - Expressivity : 가독성의 단순함과는 반대됨. 얼마나 많은 표현을 할 수 있나
        - 명령어를 기술하는 편리한 방법
        - 명령어와 기본 함수들의 강력함
## Evaluation Criteria : Reliability
- ### Type checking
    - Testing for type errors<br>
    타입 에러를 체크. 컴파일 타임에 체크하는 것이 이상적
    - 런타임에 하는 것은 더 소모적
    <br>cf) C 런타임 체크 <-> 자바 컴파일타임 체크
- ### Exception handing
    - 런타임 예외 에러를 처리
- ### Aliasing(앨리어싱)
    - 같은 메모리를 여러 개가 가리키고 있는 것-> 안정성 저해
- ### Readability and Writablity
    - 안정성을 너무 중요시할경우 가독성과 작성력이 침해
    - (Readability)이해하기 쉬운 프로그램은 오류 가능성이 적음-> 신뢰성 UP
    - (Writablity)프로그램을 쉽게 작성할 수 있다면 오류 가능성이 적어짐
## Evaluation Critera : Cost
- ### Training programmers to use the language
    - 프로그래머 양성 비용.<br>단순성, 직교성, 프로그래머의 경험에 영향을 받음
- ### 프로그램 개발 비용
    - Writability와 응용분야와의 적합성의 영향 받음
- ### 프로그램 컴파일 비용
- ### 프로그램 실행 비용
    - 언어 설계의 영향을 받음 : Type check 방법 등
- ### 컴파일 비용
    - 무료 또는 저렴한 경우 널리 사용됨(자바)
    - 고가인 경우 잘 사용되지 않음(에이다)
- ### Reliability
    - 안정성이 낮은 언어로 작성된 프로그램은 오류로 인한 비용 부담이 크다
- ### 유지보수 비용
    - 가독성과 작성력의 영향을 받음. 이러면 오류 찾기 및 수정이 쉽다 보니 유지보수 비용이 적게 듬
## Evaluation Critera : Others
- ### Portability : 이식성
    - The ease with which programs can be moved from one implementation to another<br>다른 환경에서 잘 동작하는가
- ### Generality : 일반성
    - 언어의 표현이 일반적으로 많이 쓰이는 표현과 일치하는지
- ### Well-definedness : 잘 정의가 되어 있는지
    - 언어의 공식적인 정의가 완전하며 정확한지
  
### 이러한 좋은 프로그래밍 언어의 조건들은 현재 널리 쓰이고 있는 컴퓨터 구조(폰 노이만 구조)와 프로그램 설계 방법론(OOP, 객체지향방식)에 영향을 주게 됨
---
## 컴퓨터 구조에 미친 영향
- ### 폰 노이만 구조
- ### 명령형 언어이며 가장 널리 쓰인다(폰 노이만 컴퓨터)
    - 데이터와 프로그램이 메모리에 저장되어있음
    - 메모리가 CPU와 분리되어 있음
    - 메모리에서 명령과 데이터를 CPU로 전송하는 구조
    - 명령형 언어의 토대
![NOIMAGE!](./언어론/폰노이만구조.png)
## Fetch-execute-cycle
- ### 폰 노이만 구조 컴퓨터는 Fetch-execute-cycle이라는 구조를 가진다.
```
initialize the program counter
repeat forever
    fetch the instruction pointed by the counter
    increment the counter
    decode the instruction
    execute the instruction
end repeat
```

1. PC가 가리키고 있는 명령을 가져온다
2. 다음 명령을 가리키기 위해 PC를 증가시킨다.
3. 명령을 해석한다.
4. 명령을 실행한다.
---
## 프로그래밍 방법론에 미친 영향

- ### 1950년대와 1960년대 초기
  - 간단한 프로그램들이 주를 이뤘기에 기계 성능에 크게 연연하지 않았음
- ### 1960년대 후기
  - 슬슬 사람들이 성능을 중요시하기 시작했고, 이때부터 구조화된 프로그램과 Top-down 방식의 정제된 프로그램을 제작하기 시작함
- ### 1970년대 후기
  - process oriented 프로그래밍이 data-oriented 프로그래밍을 진화했으며, 데이터 추상화 발생.
- ### 1980년대 중반
  - 객체 지향 프로그래밍 방식이 등장했다.
  - 객체 지향 방식은 데이터 추상화+다형성+상속
---
## 언어 카테고리
- ### Imperative(명령형)
  - 주요한 특징은 변수, 대입문, 반복문이다.
  - 객체 지향 프로그래밍을 지원하는 언어를 포함
  - 스크립팅 언어를 포함
  - 비주얼 언어를 포함
  - 예) C, C++, JAVA, Perl, Javasvript, 닷넷, 비주얼 배이직
- ### Functional(함수형)
  - 컴퓨팅하는 주요 방식이 주어진 매개변수에 함수를 적용하는 것
  - 예) LISP, Scheme
- ### Logic(논리형)
  - 논리 문장을 이용하여 프로그램을 표현하고 계산을 수행
  - 예) Prolog
- ### Markup/programming hybrid(마크업.프로그래밍 하이브리드)
  - 약간의 프로그래밍을 지원할 수 있게 확장된 마크업 언어
  - 예) JSTL, XSLT
---
## Language Design Trade-Offs
- ### 안정성 vs 실행 비용
  - 안정성을 올리고자 하면 비용이 증가함
  - ex) 자바는 배열의 요소에 대한 모든 참조가 적절한 인덱싱을 위해 확인되어야 하므로 실행 비용이 증가
- ### 가독성 vs 작성력
  - APL은 많은 강력한 연산자(그리고 많은 수의 새로운 기호)를 제공하여 복잡한 계산을 컴팩한 프로그램에 쓸 수 있도록 해주지만, 가독성은 떨어진다.
- ### 가독성(유연성) VS 안정성
  - C++의 포인터는 강력하고 매우 유연하지만, 안정성이 떨어진다.
---
## Implementation Methods
- ### 컴파일 방식
  - 모든 소스코드를 한번에 기계어로 번역
  - cf) C, C++, ADA, 코볼
- ### Pure Interpretation
  - 인터프리터에 이해 한줄씩 인터프리팅됨.<br>웹 기반의 스크립팅 언어가 주를 이룸
  - cf) php, js
- ### Hybrid Implementation Systems
  - 컴파일러와 인터프리터를 둘다 사용. 대표적으로 자바
---
## 컴퓨터 시스템 계층구조
![noimage!](./언어론/컴퓨터시스템계층구조.png)
- C는 Compiler 자바는 JVM 등 각각의 언어마다 기계어로 번역하여 실행하는 방법은 다르다.
---
## 컴파일 방식
- ### HLL(고수준 언어)를 기계어로 한번에 번역한다.
- ### 번역은 느리지만 실행시간은 매우 빠르다.
- ### 단계별 컴파일 방식
  - ![NOIMAGE!](./언어론/컴파일.png)
  - Lexical Analyzer :<br>소스 프로그램의 문자를 어휘 단위로 변환
  - Syntax Analyzer :<br>어휘 단위를 프로그램의 구문 구조로 나타내는 구문 분석 트리로 변환
  - Intermediate code generator and Semantic analyzer :<br> 중간 코드 생성기로 HLL이 어셈블리어로 번역되며, 그 후 코드 제네레이터로 어셈블리어가 기계어로 번역된다.
---
## 폰 노이만 병목
- ### 컴퓨터 메모리와 프로세서간의 연결 속도가 컴퓨터의 속도를 결정함
- ### 프로그램 명령문은 연결 속도보다 빠르게 실행될 수 있는데, 이러면 병목 현상을 초래하게 됨
- ### 이는 폰 노이만 병목현상으로 알려져 있으며, 컴퓨터 속도를 제한하는 주요 요인이다.
---
## Pure Interpretation
- ### 번역 과정 없음
- ### 인터프리터에 의해 런타임 에러가 즉시 표시되기에 구현이 더 쉽다는 장점이 있음
- ### 컴파일 방식에 비해 실행 속도는 느리며, 상황에 따라 더 많은 공간을 필요함
- ### 전통적인 고수준 언어에서는 드물어졌음
- ### 일부 웹스크립팅언어(자바스크립트, PHP) 등에서 유의미하게 복귀함
## Pure Interpretation Process
![noimage!](./언어론/인터프리테이션.png)

---

## Hybrid Implementation Systems

- ### 컴파일러와 퓨어 인터프리터간의 타협
- ### 고수준 언어가 용이한 인터프레테이팅을 하게 해주는 중간 언어로 변환됨
- ### Pure Interpretation보다 빠름
- ### Examples
  - Perl : 해석(Interpretation) 이전에 오류 감지를 위해 부분적으로 컴파일됨
  - 초기 자바 구현 방식은 하이브리드였음<br>바이트 코드(byte code)를 먼저 생성한 후 Interpreter에 의해 실행됨. 한데 묶여 JVM이라고 불림
## Hybrid Implementation Process
![!noimage!](./언어론/하이브리드.png)

---

## Just-in-Time Implementation Systems
- ### 처음에는 프로그램을 중간 언어로 번역함
- ### 그런 다음 하위 프로그램이 호출될 때 하위 프로그램의 중간 언어를 기계 코드로 컴파일
- ### 기계어 버전은 다음 호출을 위해 유지됨
- ### JIU 방식은 자바에 널리 사용됨
- ### 닷넷 언어는 JIT 시스템으로 구현되었음
---
## Preprocessors(전처리기)
- ### 전처리기 매크로(명령어)는 일반적으로 다른 코드가 포함되도록 지정하는 데에 사용됨
- ### 전처리기 프로세스들은 내장된 전처리 프로세서 매크로를 확장하기 위해 프로그램이 컴파일 되게 직전에 프로그램을 처리함
- ### 잘 알려진 예는 C언어 전처리기
  - #include, #define 등등...
---
## 프로그래밍 환경
- ### 소프트웨어 개발에 쓰이는 도구 모음
- ### UNIX
  - 이전 운영체제 및 도구 모음
  - 오늘날에는 유닉스 상에서 실행되는 GUI(CDE, KDE, GNOME 등)을 통해 자주 사용된다.
- ### 마이크로소프트 비주얼 스튜디오 닷넷
  - 크고 복잡한 시각적 환경
  - 웹 응용 프로그램 및 웹 이외의 응용 프로그램들을 만드는 데에 사용됨
- ### 넷빈즈
  - 비주얼 스튜디오 닷넷에 연관되어 있음,<BR>자바의 웹 응용프로그램 제외
---
## 요약
- 프로그래밍 언어론를을 배우는 이유
  - 다른 구조를 사용하는 우리의 역량을 향상시킴
  - 좀더 지능적으로 언어를 고르게 해줌
  - 새로운 언어를 좀 더 쉽게 배우게 해줌
- 제일 중요한 언어 평가 기준
  - 가독성, 작문성, 비용, 안정성, 기타...
- 언어 디자인의 주요한 영향은 컴퓨터 구조와 프로그래밍 방법론
=======
---
layout: post
title:  "프로그래밍 언어론 챕터 1"
date:   2022-04-07 14:49:24 +0900
categories: 프로그래밍언어론
---
## Chapter 1 Topics
- Reasons for Studying Concepts of Programming Languages<br>프로그래밍 언어론을 배우는 이유
- Programming Domains<br>프로그래밍 도메인
- Language Evaluation Criteria<br>프로그래밍 언어 평가 기준
- Influence on Language Design<br>언어 디자인에 대한 영향
- Language Categories<br>언어 카테고리
- Language Design Trade-Offs<br>언어 디자인 트레이드오프
---
## Reasons for Studying Concepts of Programming Language
- Increased ability to express ideas
<br>생각을 표현하기 위한 능력이 향상되었음
- Improved background for choosing appropriate languages
<br>적절한 언어를 고르기 위한 향상된 배경
- Better ability to learn new languages
<br>새로운 언어를 배우기 위한 더 좋은 능력
- Better used of languages that are already known
<br>이미 알려진 언어들의 더 좋은 사용
- Overall advancement of computing
<br>컴퓨팅의 총체적인 발전
---
## Programing Domains
- Scientific applicaitions<br>과학적 이용
    - Large numbers of floating point computations; use of arrays<br>다수의 부동 소수점 계산
    - cf) 포트란
- Business applications<BR>비즈니스적 이용
    - Produce reports, use decimal numbers and characters<br>보고서를 생성하고, 십진수 및 문자 사용
    - cf) COBOL
- Artificial Intelligence<br>인공지능
    - Symbols rather than numbers manipulated; use of linked lists
    <br>숫자보다는 기호 조작, 연결된 리스트 사용
    - LISP
- Systems Programming<br>시스템 프로그래밍
    - 지속된 사용으로 인해 효율성 필요
    - C언어
- Web Software<br>웹 소프트웨어
    - 다양한 언어들의 모음: 마크업(cf HTML)
    - 스크립팅(PHP)
    - 범용(자바)

---

## Language Evaluation Criteria
- ### Readability(가독성)
    - 프로그램을 읽고 이해할 수 있는 용이성
- ### Writability(작문법)
    - 언어를 사용하여 프로그램을 만들 수 있는 용이성
- ### Reliability(안정성)
    - 규격의 적합성
- ### Cost(비용)
    - 전체적이고 궁극적인 비용
---
## Evaluation Criteria : Readability
- ### Overall Simplicity<br>총체적인 단순성
    - 관리 가능한 구조 및 기능 조합
    - 최소 형상 다중성
    - 최소 연산자 오버로드(복잡하면 안됨)
    - ex) c++, ++c 전, 후위 연산자, 운영체제에 따른 포인터 바이트 수의 증감
- ### Orthogonality(직교성)
    - 서로 다른 것들끼리 상관성이 존재하지 않으며, 같은 것들끼리 예외성이 없는 것
    - 상대적으로 작은 원시적 구조들의 집합은 상대적으로 적은 수의 방법으로 결합될 수 있다는 것.
    - 풀어서 이야기하자면, 기능들이 겹치지 않아야 하고 동일한 작업을 수행하는 기능들이 많다면 직교성이 낮은 것이도, 동일한 기능을 하나의 명령어로만 수행한다면 직교성이 높은 것이다.
    - ex) + 기호는 정수, 부동소수점 연산 모두에서 두 수를 더하는 의미를 지닌다.(직교성 예시)
    - ex2) C언어에서 함수는 리턴타입을 가지지만 배열은 될 수 없다, 파라미터로 배열만 call by refence 사용.(직교성 위배)
- ### Data Types
    - 충분한 수의 데이터타입들이 있어야 함
- ### Syntax Considerations(구문 고려사항)
    - 식별자 형태는 유연해야 함
    - 복합문을 형성하는 특수 단어 및 방법
    - 특별한 단어를 사용하여 구문을 묶어주는 것(if, while, for 등)<br>또한 {} 등을 사용하여 가독성을 높이는 것도 포함된다.
## Evaluation Criteria : Writability
- Simplicity and Orthogonality
    – Few constructs, a small number of primitives, a small set of rules for combining them<br>적은 숫자의 구성요소들과 이들을 묶는 단순한 규칙
- Support for abstraction : 추상성 지원
    - 세부 정보를 무시할 수 있는 방식으로 복잡한 스트럭쳐 및 작업을 정의하고 사용할 수 있는 기능
    - cf) 프로세스를 추상화한 형태 : subprogram<br>
    data를 추상화한 형태 : 바이너리 트리
    - Expressivity : 가독성의 단순함과는 반대됨. 얼마나 많은 표현을 할 수 있나
        - 명령어를 기술하는 편리한 방법
        - 명령어와 기본 함수들의 강력함
## Evaluation Criteria : Reliability
- ### Type checking
    - Testing for type errors<br>
    타입 에러를 체크. 컴파일 타임에 체크하는 것이 이상적
    - 런타임에 하는 것은 더 소모적
    <br>cf) C 런타임 체크 <-> 자바 컴파일타임 체크
- ### Exception handing
    - 런타임 예외 에러를 처리
- ### Aliasing(앨리어싱)
    - 같은 메모리를 여러 개가 가리키고 있는 것-> 안정성 저해
- ### Readability and Writablity
    - 안정성을 너무 중요시할경우 가독성과 작성력이 침해
    - (Readability)이해하기 쉬운 프로그램은 오류 가능성이 적음-> 신뢰성 UP
    - (Writablity)프로그램을 쉽게 작성할 수 있다면 오류 가능성이 적어짐
## Evaluation Critera : Cost
- ### Training programmers to use the language
    - 프로그래머 양성 비용.<br>단순성, 직교성, 프로그래머의 경험에 영향을 받음
- ### 프로그램 개발 비용
    - Writability와 응용분야와의 적합성의 영향 받음
- ### 프로그램 컴파일 비용
- ### 프로그램 실행 비용
    - 언어 설계의 영향을 받음 : Type check 방법 등
- ### 컴파일 비용
    - 무료 또는 저렴한 경우 널리 사용됨(자바)
    - 고가인 경우 잘 사용되지 않음(에이다)
- ### Reliability
    - 안정성이 낮은 언어로 작성된 프로그램은 오류로 인한 비용 부담이 크다
- ### 유지보수 비용
    - 가독성과 작성력의 영향을 받음. 이러면 오류 찾기 및 수정이 쉽다 보니 유지보수 비용이 적게 듬
## Evaluation Critera : Others
- ### Portability : 이식성
    - The ease with which programs can be moved from one implementation to another<br>다른 환경에서 잘 동작하는가
- ### Generality : 일반성
    - 언어의 표현이 일반적으로 많이 쓰이는 표현과 일치하는지
- ### Well-definedness : 잘 정의가 되어 있는지
    - 언어의 공식적인 정의가 완전하며 정확한지
  
### 이러한 좋은 프로그래밍 언어의 조건들은 현재 널리 쓰이고 있는 컴퓨터 구조(폰 노이만 구조)와 프로그램 설계 방법론(OOP, 객체지향방식)에 영향을 주게 됨
---
## 컴퓨터 구조에 미친 영향
- ### 폰 노이만 구조
- ### 명령형 언어이며 가장 널리 쓰인다(폰 노이만 컴퓨터)
    - 데이터와 프로그램이 메모리에 저장되어있음
    - 메모리가 CPU와 분리되어 있음
    - 메모리에서 명령과 데이터를 CPU로 전송하는 구조
    - 명령형 언어의 토대
![NOIMAGE!](./언어론/폰노이만구조.png)
## Fetch-execute-cycle
- ### 폰 노이만 구조 컴퓨터는 Fetch-execute-cycle이라는 구조를 가진다.
```
initialize the program counter
repeat forever
    fetch the instruction pointed by the counter
    increment the counter
    decode the instruction
    execute the instruction
end repeat
```

1. PC가 가리키고 있는 명령을 가져온다
2. 다음 명령을 가리키기 위해 PC를 증가시킨다.
3. 명령을 해석한다.
4. 명령을 실행한다.
---
## 프로그래밍 방법론에 미친 영향

- ### 1950년대와 1960년대 초기
  - 간단한 프로그램들이 주를 이뤘기에 기계 성능에 크게 연연하지 않았음
- ### 1960년대 후기
  - 슬슬 사람들이 성능을 중요시하기 시작했고, 이때부터 구조화된 프로그램과 Top-down 방식의 정제된 프로그램을 제작하기 시작함
- ### 1970년대 후기
  - process oriented 프로그래밍이 data-oriented 프로그래밍을 진화했으며, 데이터 추상화 발생.
- ### 1980년대 중반
  - 객체 지향 프로그래밍 방식이 등장했다.
  - 객체 지향 방식은 데이터 추상화+다형성+상속
---
## 언어 카테고리
- ### Imperative(명령형)
  - 주요한 특징은 변수, 대입문, 반복문이다.
  - 객체 지향 프로그래밍을 지원하는 언어를 포함
  - 스크립팅 언어를 포함
  - 비주얼 언어를 포함
  - 예) C, C++, JAVA, Perl, Javasvript, 닷넷, 비주얼 배이직
- ### Functional(함수형)
  - 컴퓨팅하는 주요 방식이 주어진 매개변수에 함수를 적용하는 것
  - 예) LISP, Scheme
- ### Logic(논리형)
  - 논리 문장을 이용하여 프로그램을 표현하고 계산을 수행
  - 예) Prolog
- ### Markup/programming hybrid(마크업.프로그래밍 하이브리드)
  - 약간의 프로그래밍을 지원할 수 있게 확장된 마크업 언어
  - 예) JSTL, XSLT
---
## Language Design Trade-Offs
- ### 안정성 vs 실행 비용
  - 안정성을 올리고자 하면 비용이 증가함
  - ex) 자바는 배열의 요소에 대한 모든 참조가 적절한 인덱싱을 위해 확인되어야 하므로 실행 비용이 증가
- ### 가독성 vs 작성력
  - APL은 많은 강력한 연산자(그리고 많은 수의 새로운 기호)를 제공하여 복잡한 계산을 컴팩한 프로그램에 쓸 수 있도록 해주지만, 가독성은 떨어진다.
- ### 가독성(유연성) VS 안정성
  - C++의 포인터는 강력하고 매우 유연하지만, 안정성이 떨어진다.
---
## Implementation Methods
- ### 컴파일 방식
  - 모든 소스코드를 한번에 기계어로 번역
  - cf) C, C++, ADA, 코볼
- ### Pure Interpretation
  - 인터프리터에 이해 한줄씩 인터프리팅됨.<br>웹 기반의 스크립팅 언어가 주를 이룸
  - cf) php, js
- ### Hybrid Implementation Systems
  - 컴파일러와 인터프리터를 둘다 사용. 대표적으로 자바
---
## 컴퓨터 시스템 계층구조
![noimage!](./언어론/컴퓨터시스템계층구조.png)
- C는 Compiler 자바는 JVM 등 각각의 언어마다 기계어로 번역하여 실행하는 방법은 다르다.
---
## 컴파일 방식
- ### HLL(고수준 언어)를 기계어로 한번에 번역한다.
- ### 번역은 느리지만 실행시간은 매우 빠르다.
- ### 단계별 컴파일 방식
  - ![NOIMAGE!](./언어론/컴파일.png)
  - Lexical Analyzer :<br>소스 프로그램의 문자를 어휘 단위로 변환
  - Syntax Analyzer :<br>어휘 단위를 프로그램의 구문 구조로 나타내는 구문 분석 트리로 변환
  - Intermediate code generator and Semantic analyzer :<br> 중간 코드 생성기로 HLL이 어셈블리어로 번역되며, 그 후 코드 제네레이터로 어셈블리어가 기계어로 번역된다.
---
## 폰 노이만 병목
- ### 컴퓨터 메모리와 프로세서간의 연결 속도가 컴퓨터의 속도를 결정함
- ### 프로그램 명령문은 연결 속도보다 빠르게 실행될 수 있는데, 이러면 병목 현상을 초래하게 됨
- ### 이는 폰 노이만 병목현상으로 알려져 있으며, 컴퓨터 속도를 제한하는 주요 요인이다.
---
## Pure Interpretation
- ### 번역 과정 없음
- ### 인터프리터에 의해 런타임 에러가 즉시 표시되기에 구현이 더 쉽다는 장점이 있음
- ### 컴파일 방식에 비해 실행 속도는 느리며, 상황에 따라 더 많은 공간을 필요함
- ### 전통적인 고수준 언어에서는 드물어졌음
- ### 일부 웹스크립팅언어(자바스크립트, PHP) 등에서 유의미하게 복귀함
## Pure Interpretation Process
![noimage!](./언어론/인터프리테이션.png)

---

## Hybrid Implementation Systems

- ### 컴파일러와 퓨어 인터프리터간의 타협
- ### 고수준 언어가 용이한 인터프레테이팅을 하게 해주는 중간 언어로 변환됨
- ### Pure Interpretation보다 빠름
- ### Examples
  - Perl : 해석(Interpretation) 이전에 오류 감지를 위해 부분적으로 컴파일됨
  - 초기 자바 구현 방식은 하이브리드였음<br>바이트 코드(byte code)를 먼저 생성한 후 Interpreter에 의해 실행됨. 한데 묶여 JVM이라고 불림
## Hybrid Implementation Process
![!noimage!](./언어론/하이브리드.png)

---

## Just-in-Time Implementation Systems
- ### 처음에는 프로그램을 중간 언어로 번역함
- ### 그런 다음 하위 프로그램이 호출될 때 하위 프로그램의 중간 언어를 기계 코드로 컴파일
- ### 기계어 버전은 다음 호출을 위해 유지됨
- ### JIU 방식은 자바에 널리 사용됨
- ### 닷넷 언어는 JIT 시스템으로 구현되었음
---
## Preprocessors(전처리기)
- ### 전처리기 매크로(명령어)는 일반적으로 다른 코드가 포함되도록 지정하는 데에 사용됨
- ### 전처리기 프로세스들은 내장된 전처리 프로세서 매크로를 확장하기 위해 프로그램이 컴파일 되게 직전에 프로그램을 처리함
- ### 잘 알려진 예는 C언어 전처리기
  - #include, #define 등등...
---
## 프로그래밍 환경
- ### 소프트웨어 개발에 쓰이는 도구 모음
- ### UNIX
  - 이전 운영체제 및 도구 모음
  - 오늘날에는 유닉스 상에서 실행되는 GUI(CDE, KDE, GNOME 등)을 통해 자주 사용된다.
- ### 마이크로소프트 비주얼 스튜디오 닷넷
  - 크고 복잡한 시각적 환경
  - 웹 응용 프로그램 및 웹 이외의 응용 프로그램들을 만드는 데에 사용됨
- ### 넷빈즈
  - 비주얼 스튜디오 닷넷에 연관되어 있음,<BR>자바의 웹 응용프로그램 제외
---
## 요약
- 프로그래밍 언어론를을 배우는 이유
  - 다른 구조를 사용하는 우리의 역량을 향상시킴
  - 좀더 지능적으로 언어를 고르게 해줌
  - 새로운 언어를 좀 더 쉽게 배우게 해줌
- 제일 중요한 언어 평가 기준
  - 가독성, 작문성, 비용, 안정성, 기타...
- 언어 디자인의 주요한 영향은 컴퓨터 구조와 프로그래밍 방법론
>>>>>>> e9fa99f1f2af58f2e1fcd9d634a346e9ed5cabc8
- 가장 주효한 프로그래밍 구현 방법 : 컴파일, 인터프레테이션, 하이브리드 구현