<<<<<<< HEAD
---
layout: post
title:  "운영체제 Lecture 2"
date:   2022-04-11 14:49:24 +0900
categories: 운영체제
---
## 운영체제의 역할
> 응용 프로그램 <-> 운영체제 <-> 컴퓨터 시스템 자원

- User Interface(편리성)
  - CUI(Character User Interface)
  - GUI(Graphical User Interface)
  - EUCI(End-User Comfortable Interface)
- Resource management(효율성)
  - HW resource(processor, memory, I/O devices, Etc.)
  - SW resource(file, application, message, signal, Etc.)
- process and thread management
- System management(시스템 보호)
## 컴퓨터 시스템의 구성
![noimage!](./운영체제/컴퓨터시스템구성.png)
- 사용자들
---
운영체제의 구분
- ### 단일 사용자(SIngle-user system)
  - 한명의 사용자만 시스템 사용 가능
    - 한명의 사용자가 모든 시스템 자원 독점
    - 자원관리 및 시스템 보호방식이 간간함
  - 개인용 장비(PC, 모바일)등에 사용
- ### 다중 사용자(Multi-user system)
  - 동시에 여러 사용자만 시스템 사용
    - 각종 시스템 자원들에 대한 소유 권한 관리 필요
    - 기본적으로 머맅태스킹 기능 필요
    - OS의 기능 및 구조가 복잡
  - 서버, 클러스터 장비 등에 사용
    - 유닉스, 리눅스 등
---
## 동시 실행 프로세스 수
- ### 단일작업
  - 시스템 내에 하나의 작업만 존재
    - 하나의 프로그램 실행을 마친 뒤 다른 프로그램을 실행
  - 운영체제 구조가 간단
  - DOS
- ### 다중작업
  - 동시에 여러 작업 수행 가능
    - 작업들 사이의 동시 수행, 동기화 등을 관리해야 함
  - 운영체제의 기능 및 구조가 복잡
  - 유닉스, 리눅스, 윈도우즈
---
## 작업 수행 방식
- ### 순차처리(NO OS, ~1940)
  - 사용자가 기계어로 직접 프로그램 작성
  - 컴퓨터가 필요한 모든 작업 프로그램에 포함
  - 실행하는 작업 별 순차처리
    - 각각의 작업에 대한 준비시간이 소요
- ### 배치(일괄처리) 시스템(1950~1960)
  - 모든 시스템을 중앙에서 관리 및 운영
  - 사용자의 요청 작업을 일정 시간 모아두었다가 한꺼번에 처리
  - 시스템 지향적
  - 장점
    - 많은 사용자가 시스템 자원 공유
    - 처리 효율 향상
  - 단점
    - 생산성 저하
    - 긴 응답시간(약 6시간)
- ### Time Sharing Systems(시분할 시스템) 1960~1970
  - 여러 사용자가 자원을 동시에 사용
    - OS가 파일 시스템 및 가상 메모리 관리
  - 사용자 지향적
    - 대화형, 단말기 사용
  - 장점
    - 응답시간 단축(5초 가량)
    - 생산성 향상
      - 프로세서 유휴시간 감소
  - 단점
    - 통신비용 증가
      - 통신선 비용, 보안 문제
    - 개인 사용자 체감 속도 저하
- ### Personal Computing
  - 개인이 시스템 전체 독점
  - CPU 활용률은 고려의 대상이 아님
  - OS가 상대적으로 단순함
    - 하지만 다양한 사용자 지원 기능
  - 장점
    - 빠른 응답시간
  - 단점
    - 퍼포먼스가 낮음
- ### Parallel Processing System(평행처리 시스템)
  - 단일 시스템 내에 둘 이상의 프로세서 사용
    - 동시에 둘 이상의 프로세스 지원
  - 메모리 등의 자원 공유(Tightly coupled system)
  - 사용 목적
    - 성능 향상
    - 신뢰성 향상
  - 프로세서간 관계 및 역할 관리 필요
- ### Distribued Processing Systmes(분할처리 시스템)
  - 네트워크를 기반으로 구축된 병렬처리 시스템
    - 물리적인 분산, 통신망 이용한 상호 연결
    - 각각 운영채제 탑재한 다수의 범용 시스템으로 구성
    - 사용자는 분산운영체제를 통해 하나의 프로그램, 자원처럼 사용 가능(은폐성)
    - 각 구성요소들간의 독립성 유지, 공동작업 가능
    - 클러스터 시스템, 클라이언트-서버 시스템, P2P
  - 장점
    - 자원 공유를 통한 높은 성능
    - 고신뢰성, 높은 확장성
  - 단점
    - 구축 및 관리가 어려움
- ### Real-time Systems(실시간 처리)
  - 작업 처리에 제한 시간을 갖는 시스템
    - 제한시간 내에 서비스를 제공하는 것이 자원 활용 효율보다 중요
  - 작업의 종류
    - Hard real-time task
      - 시간 제약을 지키지 못하는 경우 시스템에 치명적인 영향
      - 발전소 제어, 무기 제어 등
    - Soft real-time task
      - 동영상 재생 등
    - Non real-time task
---
# 운영체제의 구조
- ### 커널
  - OS의 핵심 부분(메모리 상주)
    - 가장 빈번하게 사용되는 기능들 담당
      - 시스템 관리 등
  - 동의어
    - 핵, 관리자 프로그램, 상주 프로그램, 제어 프로그램 등
- ### 유틸리티
  - 비상주 프로그램
  - UI등 서비스 프로그램
## ![noimage!](./운영체제/운영체제구조.png)
- ### 커널 기능
  - 하드웨어 리소스 관리
    - 흐로세서, 메모리, 입출력 장치...
  - 소프트웨어 리소스 관리
    - 파일, 메세지, 프로세스...
## 단일 구조
  - 초기에 생겨난 가장 보편적인 형태로, 운영체제의 모든 기능을 커널과 동일한 메모리 공간에 적재를 한 뒤 system call을(시스템 호출 인터페이스) 통해서 사용할 수 있다. 작고 간단하며서도 기능이 제한된 도스가 예로 있다.
  - 장점
    - 커널 내 모듈간 직접 통신
      - 효율적 자원 관리 및 사용
    - 단점
      - 커널의 거대화
        - 오류 및 버그, 추가 기능 구현 등 유지보수가 어려움
        - 동일 메모리에 모든 기능이 있어 한 모듈의 문제가 전체 시스템에 영향
## 계층 구조
  - 장점
    - 모듈화
      - 계층간 검증 및 수정 용의
    - 설계 및 구현의 단순화
  - 단점
    - 단일구조 대비 성능 저하
      - 원하는 기능 수행을 위해 여러 계층을 거쳐야 함
## 마이크로 커널 구조
- 커널의 크기 최소화
  - 필수 기능만 포함
  - 기타 기능은 사용자 영역에서 수행
---
# 운영체제의 기능
## 프로세스 관리
  - 프로세스 
    - 커널에 등록된 실행 단위(실행 중인 프로그램)
    - 사용자 요청/프로그램의 실행 주체
  - OS의 프로세스 관리 기능
    - 생성/삭제, 상태 관리
    - 자원할당
    - 프로세스 간 통신 및 동기화
    - 교착상태 해결
  - 프로세스 정보 관리
    - PCB(Process Control Bloc)
  - 중앙 처리 장치(CPU)
    - 프로그램을 실행하는 핵심 자원
  - 프로세스 스케줄링
    - 시스템 내의 프로세스 처리순서 결정
  - 프로세스 할당 관리
    - 프로세스들에 대한 프로세스 할당
      - 한번에 하나의 프로세스만 사용가능
## 메모리 관리
  - 주기억장치
    - 작업을 위한 프로그램 및 데이터를 올려놓는 공간
    - 멀티 유저, 멀티 태스킹 시스템
      - 프로세스에 대한 메모리 할당 및 회수
      - 메모리 여우 공간 관리
      - 각 프로세스의 할당 메모리 영역 접근 보호
    - 메모리 할당 방법(scheme)
      - 전체 적재
        - 장점 : 구현이 간단/단점:제한적 공간
      - 일부 적재
        - 프로그램 및 데이터 일부만 적재
        - 장점 : 메모리의 효율적 활용 / 단점 : 보조기억 장치 접근 필요
## 파일 관리
  - 파일 : 논리적 데이터 저장 단위
  - 사용자 및 시스템의 파일 관리
  - 디렉토리 구조 지원
  - 파일 관리 기능
  - 파일 및 디렉토리 생성 삭제
## 입출력 관리
OS를 반드시 거쳐야 함  
=======
---
layout: post
title:  "운영체제 Lecture 2"
date:   2022-04-11 14:49:24 +0900
categories: 운영체제
---
## 운영체제의 역할
> 응용 프로그램 <-> 운영체제 <-> 컴퓨터 시스템 자원

- User Interface(편리성)
  - CUI(Character User Interface)
  - GUI(Graphical User Interface)
  - EUCI(End-User Comfortable Interface)
- Resource management(효율성)
  - HW resource(processor, memory, I/O devices, Etc.)
  - SW resource(file, application, message, signal, Etc.)
- process and thread management
- System management(시스템 보호)
## 컴퓨터 시스템의 구성
![noimage!](./운영체제/컴퓨터시스템구성.png)
- 사용자들
---
운영체제의 구분
- ### 단일 사용자(SIngle-user system)
  - 한명의 사용자만 시스템 사용 가능
    - 한명의 사용자가 모든 시스템 자원 독점
    - 자원관리 및 시스템 보호방식이 간간함
  - 개인용 장비(PC, 모바일)등에 사용
- ### 다중 사용자(Multi-user system)
  - 동시에 여러 사용자만 시스템 사용
    - 각종 시스템 자원들에 대한 소유 권한 관리 필요
    - 기본적으로 머맅태스킹 기능 필요
    - OS의 기능 및 구조가 복잡
  - 서버, 클러스터 장비 등에 사용
    - 유닉스, 리눅스 등
---
## 동시 실행 프로세스 수
- ### 단일작업
  - 시스템 내에 하나의 작업만 존재
    - 하나의 프로그램 실행을 마친 뒤 다른 프로그램을 실행
  - 운영체제 구조가 간단
  - DOS
- ### 다중작업
  - 동시에 여러 작업 수행 가능
    - 작업들 사이의 동시 수행, 동기화 등을 관리해야 함
  - 운영체제의 기능 및 구조가 복잡
  - 유닉스, 리눅스, 윈도우즈
---
## 작업 수행 방식
- ### 순차처리(NO OS, ~1940)
  - 사용자가 기계어로 직접 프로그램 작성
  - 컴퓨터가 필요한 모든 작업 프로그램에 포함
  - 실행하는 작업 별 순차처리
    - 각각의 작업에 대한 준비시간이 소요
- ### 배치(일괄처리) 시스템(1950~1960)
  - 모든 시스템을 중앙에서 관리 및 운영
  - 사용자의 요청 작업을 일정 시간 모아두었다가 한꺼번에 처리
  - 시스템 지향적
  - 장점
    - 많은 사용자가 시스템 자원 공유
    - 처리 효율 향상
  - 단점
    - 생산성 저하
    - 긴 응답시간(약 6시간)
- ### Time Sharing Systems(시분할 시스템) 1960~1970
  - 여러 사용자가 자원을 동시에 사용
    - OS가 파일 시스템 및 가상 메모리 관리
  - 사용자 지향적
    - 대화형, 단말기 사용
  - 장점
    - 응답시간 단축(5초 가량)
    - 생산성 향상
      - 프로세서 유휴시간 감소
  - 단점
    - 통신비용 증가
      - 통신선 비용, 보안 문제
    - 개인 사용자 체감 속도 저하
- ### Personal Computing
  - 개인이 시스템 전체 독점
  - CPU 활용률은 고려의 대상이 아님
  - OS가 상대적으로 단순함
    - 하지만 다양한 사용자 지원 기능
  - 장점
    - 빠른 응답시간
  - 단점
    - 퍼포먼스가 낮음
- ### Parallel Processing System(평행처리 시스템)
  - 단일 시스템 내에 둘 이상의 프로세서 사용
    - 동시에 둘 이상의 프로세스 지원
  - 메모리 등의 자원 공유(Tightly coupled system)
  - 사용 목적
    - 성능 향상
    - 신뢰성 향상
  - 프로세서간 관계 및 역할 관리 필요
- ### Distribued Processing Systmes(분할처리 시스템)
  - 네트워크를 기반으로 구축된 병렬처리 시스템
    - 물리적인 분산, 통신망 이용한 상호 연결
    - 각각 운영채제 탑재한 다수의 범용 시스템으로 구성
    - 사용자는 분산운영체제를 통해 하나의 프로그램, 자원처럼 사용 가능(은폐성)
    - 각 구성요소들간의 독립성 유지, 공동작업 가능
    - 클러스터 시스템, 클라이언트-서버 시스템, P2P
  - 장점
    - 자원 공유를 통한 높은 성능
    - 고신뢰성, 높은 확장성
  - 단점
    - 구축 및 관리가 어려움
- ### Real-time Systems(실시간 처리)
  - 작업 처리에 제한 시간을 갖는 시스템
    - 제한시간 내에 서비스를 제공하는 것이 자원 활용 효율보다 중요
  - 작업의 종류
    - Hard real-time task
      - 시간 제약을 지키지 못하는 경우 시스템에 치명적인 영향
      - 발전소 제어, 무기 제어 등
    - Soft real-time task
      - 동영상 재생 등
    - Non real-time task
---
# 운영체제의 구조
- ### 커널
  - OS의 핵심 부분(메모리 상주)
    - 가장 빈번하게 사용되는 기능들 담당
      - 시스템 관리 등
  - 동의어
    - 핵, 관리자 프로그램, 상주 프로그램, 제어 프로그램 등
- ### 유틸리티
  - 비상주 프로그램
  - UI등 서비스 프로그램
## ![noimage!](./운영체제/운영체제구조.png)
- ### 커널 기능
  - 하드웨어 리소스 관리
    - 흐로세서, 메모리, 입출력 장치...
  - 소프트웨어 리소스 관리
    - 파일, 메세지, 프로세스...
## 단일 구조
  - 초기에 생겨난 가장 보편적인 형태로, 운영체제의 모든 기능을 커널과 동일한 메모리 공간에 적재를 한 뒤 system call을(시스템 호출 인터페이스) 통해서 사용할 수 있다. 작고 간단하며서도 기능이 제한된 도스가 예로 있다.
  - 장점
    - 커널 내 모듈간 직접 통신
      - 효율적 자원 관리 및 사용
    - 단점
      - 커널의 거대화
        - 오류 및 버그, 추가 기능 구현 등 유지보수가 어려움
        - 동일 메모리에 모든 기능이 있어 한 모듈의 문제가 전체 시스템에 영향
## 계층 구조
  - 장점
    - 모듈화
      - 계층간 검증 및 수정 용의
    - 설계 및 구현의 단순화
  - 단점
    - 단일구조 대비 성능 저하
      - 원하는 기능 수행을 위해 여러 계층을 거쳐야 함
## 마이크로 커널 구조
- 커널의 크기 최소화
  - 필수 기능만 포함
  - 기타 기능은 사용자 영역에서 수행
---
# 운영체제의 기능
## 프로세스 관리
  - 프로세스 
    - 커널에 등록된 실행 단위(실행 중인 프로그램)
    - 사용자 요청/프로그램의 실행 주체
  - OS의 프로세스 관리 기능
    - 생성/삭제, 상태 관리
    - 자원할당
    - 프로세스 간 통신 및 동기화
    - 교착상태 해결
  - 프로세스 정보 관리
    - PCB(Process Control Bloc)
  - 중앙 처리 장치(CPU)
    - 프로그램을 실행하는 핵심 자원
  - 프로세스 스케줄링
    - 시스템 내의 프로세스 처리순서 결정
  - 프로세스 할당 관리
    - 프로세스들에 대한 프로세스 할당
      - 한번에 하나의 프로세스만 사용가능
## 메모리 관리
  - 주기억장치
    - 작업을 위한 프로그램 및 데이터를 올려놓는 공간
    - 멀티 유저, 멀티 태스킹 시스템
      - 프로세스에 대한 메모리 할당 및 회수
      - 메모리 여우 공간 관리
      - 각 프로세스의 할당 메모리 영역 접근 보호
    - 메모리 할당 방법(scheme)
      - 전체 적재
        - 장점 : 구현이 간단/단점:제한적 공간
      - 일부 적재
        - 프로그램 및 데이터 일부만 적재
        - 장점 : 메모리의 효율적 활용 / 단점 : 보조기억 장치 접근 필요
## 파일 관리
  - 파일 : 논리적 데이터 저장 단위
  - 사용자 및 시스템의 파일 관리
  - 디렉토리 구조 지원
  - 파일 관리 기능
  - 파일 및 디렉토리 생성 삭제
## 입출력 관리
OS를 반드시 거쳐야 함  
>>>>>>> e9fa99f1f2af58f2e1fcd9d634a346e9ed5cabc8
