---
layout: post
title:  "컴퓨터구조 1주차"
date:   2022-04-10 14:49:24 +0900
categories: 컴퓨터구조
---
# Topic : 메모리 개요
## 1. 메모리 및 메모리 셀
- ### 메모리
  - 메모리 셀들의 배열로 구성된 데이터 저장장소
  - 어드레스를 사용하여 셀들의 위치를 지정
- ### 메모리 셀
  - 이진 데이터를 저장할 수 있는 저장 공간
  - 이진값 0과 1을 표현할 수 있는 2가지의 상태를 유지하는 소자
    - 상태를 설정 -> 쓰기(write)
    - 상태를 감지 -> 읽기(read)
  - 메모리 셀 구현방법
    - 마그네틱 메모리 셀 : 자성체를 활용한 메모리 소자
    - 반도체 메모리 셀 : 반도체 위에 전자회로를 사용하여 구현한 메모리 소자
# ![noimage!](./컴구조/%EB%A9%94%EB%AA%A8%EB%A6%AC%EC%85%80.png)
## 1.1 메모리 동작
- ### 메모리 동작 유형
  - 메모리 읽기(Memory Read) : 메모리에 저장된 데이터를 메모리 밖으로 출력하는 동작
  - 메모리 쓰기(Memory Write) : 데이터를 메모리에 저장하는 동작
# ![noimage!](./컴구조/메모리동작.png)
## 1.2 메모리 연결
- ### 메모리 연결 
  - 어드레스 선택 라인 : 메모리 셀의 위치 지정
    - 메모리 셀의 수에 따라 결정
  - 데이터 라인 : 메모리 셀에 저장하거나, 메모리 셀에 저장된 데이터를 읽어올 때 데이터의 입출력 경로
  - 제어 라인 : 메모리 동작을 제어하는 신호
- ### 메모리 워드(Word)
  - 메모리에 입출력되는 단위 데이터의 비트 수
# ![noimage!](./컴구조/메모리연결.png)
## 1.3 메모리 접근방식
- ### 임의 접근 메모리
  - 메모리 셀에 데이터를 읽거나 쓸 때 소요되는 시간이 메모리 셀의 위치에 상관없이 일정한 메모리
  - 어드레스를 사용하여 기억작소를 식별
  - 접근 시간은 이전 접근 장소와 무관하며 항상 일정
    - 반도체 메모리
- ### 직접 접근
  - 각 블록이 별도 주소를 가지고 있음
  - 접근 방법은 근처로 이동한 다음 순차적 검색, 계수, 또는 대기를 통하여 최종 위치에 도달함
  - 접근 시간은 가변적
    - 하드 디스크
- ### 순차적 액세스 메모리
  - 메모리 접근이 처음부터 순차적으로 이루어짐
  - 메모리 셀의 위치나 메모리 접근시 시작 위치에 따라 메모리 접근 시간이 다름
    - 자기 테이프
- ### 연관 접근
  - 기억장소는 저장된 데이터 내용과 비교함으로써 식별됨
  - 접근 시간은 이전 접근 장소와 무관하며, 항상 일정 : 비교 부담(오버헤드)
    - 캐시
## 1.4 메모리 구현방식
- ### 마그네틱 메모리
  - 자성체를 활용한 메모리
    - 마그네킥 코어 메모리
    - 하드 디스크
- ### 반도체 메모리
  - 반도체상에 전자회로를 사용하여 구현한 메모리
    - 램, 롬
## 2. 메모리 성능
- ### 메모리 성능 표시 방법
  - 메모리 접근 시간
    - 메모리에서 읽고 쓰는 동작을 수행하는 데에 걸리는 시간
  - 메모리 사이클 시간
    - 메모리 접근 시간 + 다음 접근 준비시간
  - 메모리 전송률
    - 메모리로 데이터가 전송되어 들어가거나 나오는 비율
## 2.1 메모리 접근 시간
- ### 메모리 접근 시간(Memory Access Time)
  - 메모리에서 읽고 쓰는 동작을 수행하는 데에 걸리는 시간
    - Read Access time : 어드레스와 제어 신호가 메모리에 도착하는 순간부터 데이터가 읽혀지는 순간까지 걸리는 시간
    - Write Access Time : 어드레스와 제어 신호가 메모리에 적용되고, 데이터 쓰기가 완료될 때까지 걸리는 시간
## 2.2 메모리 사이클 시간
- ### 메모리 사이클 시간
  - 메모리 access time + (다음 접근에 걸리는 추가적인 시간)
  - 추가적인 시간 예
    - 신호선에서 과도 전류가 완전히 소멸되는 데에 걸리는 시간
    - 읽기 동작 후 데이터가 파괴되는 저장장치의 경우, 데이터를 복원하는 데에 걸리는 시간
# ![noimage!](./컴구조/메모리접근시간,사이클.png)
## 2.3 메모리 전송률
- ### 메모리 전송률(Memory Transfer Rate)
  - 메모리로 데이터가 전송되어 들어가거나 나온ㄴ 비율
  - 임의 접근 메모리의 경우, 전송률은 1/(cycle time)
  - 임의 접근 메모리가 아닌 경우, 전송률은\
# ![noimage!](./컴구조/메모리전송율.png)
## 3. 메모리 타이밍
- ### 메모리는 클럭을 사용하지 않고 제어신호의 변화에 따라 데이터 읽고 쓰기가 실행된다.
- ### 읽기 타이밍(Read Timing)
  - Access Time : 어드레스가 주어진 시간부터 데이터가 출력되는 데에 소요되는 최대 시간
  - Read Cycle Time : 이번 Read 시작시간부터 완료되는 시점(다음 Read를 시작할 수 있는 시점)에 소요되는 시간
# ![noimage!](./컴구조/읽기타이밍다이어그램.png)
- ### 쓰기 타이밍
  - Write Cycle Time : 어드레스가 주어진 후 메모리 셀에 데이터가 저장되는 최대 시간
# ![noimage!](./컴구조/쓰기타이밍다이어그램.png)
---
# Topic : 메모리 구조
## 1. 메모리 내부구조
# ![noimage!](./컴구조/메모리내부구조.png)
## 2. 메모리 확장
- ### 메모리 확장(Memory Expansion)
  - 여러 개의 메모리 칩을 연결하여 대용량 메모리를 구성하는 것
    - 용량 확장(Size/Capacity Expansion) : 메모리 용량을 확장
    - 워드 확장 : 메모리 입출력 데이터 폭을 확장
## 2.1 용량 확장
- ### 16KB(16Kx8) 메모리 4개를 사용하여 64KB 메모리로 확장
## 2.2 워드 확장
- ### 2KB(16Kx1) 메모리 8개를 사용하여 16KB 메모리로 확장
## 3. 메모리 컨트롤러
- ### CPU와 메모리 사이에 위치하여 메모리 사용에 필요한 작업을 수행하거나 제어신호를 발생하는 장치
  - 별도 칩이며, 마이크로 프로세서에 내장
- ### 기능
  - 프론트엔드
    - 메모리에 대한 요청 및 응답 버퍼링
    - 메모리 매핑 : 메모리 어드레스 디코딩
    - 중재 : 메모리 접근 순서 결정
  - 백엔드
    - 명령어 생성 : 타겟 메모리에 필요한 명령어 생성
# ![noimage!](./컴구조/메모리컨트롤러.png)
## 4. 메모리 대역폭 확장
- ### 메모리 대역폭 확장
  - CPU와 메모리 사이의 데이터 전송률
- ### 메모리 대역폭 확장 방법
  - 메모리 접근 속도 또는 동작 주파수 향상
  - 멀티 포트 메모리 사용한 입출력 포트수 증가
    - 멀티 포트 메모리 : 하나의 메모리의 입출력 포트가 2개 이상인 메모리
  - 멀티 채널 메모리 구조
    - DRAM과 메모리 컨트롤러 사이의 통신채널을 여러개 사용하여 메모리 전송속도를 향상시키는 방법
  - 메모리 병렬화 (interleaved 메모리)
## 5. 메모리 인터리빙
- ### Interleaved 메모리
  - 메모리를 뱅크(bank)로 구성
  - 메모리 액세스를 병렬화
# ![noimage!](./컴구조/인터리브드메모리.png)
---
# Topic : 데이터 저장방식
## 1. 저장 순서
- ### Byte Order
  - 멀티 바이트로 구성된 데이터를 바이트 단위로 어드레싱하는 메모리에 저장하는 방법
    - 엔디안
- ### Big-endian
  - Left-to-right (western culture language style)
  - 가장 낮은 어드레스에 상위 바이트(most significant byte)부터 차례로 저장
  - IBM, 모토로라, SUN 대부분의 RISC, 인터넷
- ### Little-Endian
  - Right-to-left
  - 가장 낮은 어드레스에 하위 바이트부터 차례로 저장
  - Intel, VAX
## 1.1 Byte Order 사례
- ### 저장 사례
  - "0x12345678" 값을 4바이트 메모리에 저장하는 방법
# ![noimage!](./컴구조/바이트오더.png)
## 1.2 메모리 정렬 및 패딩
- ### 메모리 정렬(Memory Alignment)
  - 다양한 크기의 변수로 구성된 데이터 구조체를 메모리에 할당하는 방법
  - 워드 크기에 맞춰 메모리 접근
    - 32비트 시스템인 경우 4바이트 단위로 어드레싱
  - 컴파일러에서 워드 단위로 메모리 할당
    - 빈 공간에 임의의 데이터를 패딩하여 정렬시킨다.
# ![noimage!](./컴구조/메모리정렬.png)
## 3. Unpacked/Packed 할당
- ### Unpacked 메모리 할당
  - 워드 단위로 메모리 할당
  - 빈 공간에 임의 데이터 추가
  - 어드레싱 간단
  - 메모리 공간 낭비
- ### Packed 메모리 할당
  - 바이트 단위로 메모리 할당
  - 빈 공간없이 밀착 할당
  - 메모리 공간의 효율적 할당
  - 메모리 접근 속도 저하
# ![noimage!](./컴구조/팩드,언팩드.png)
- ### 데이터 구조체에 대한 명시적 메모리 공간 할당 방법
  - 컴파일러 지시자(__packed__)를 명시적으로 지정
```
struct __attribute__((__packed__)) test {
  char foo; // 1-바이트
  int bar; // 4-바이트
}
```
  - 프로그램 코드에서 변수를 재배치하여 패딩을 최소화
---
# Topic : 메모리 특성과 유형
## 1. 메모리 특성
- ### 접근 용이성
  - 순차적 접근 : 자기테이프
  - 임의 접근 : 반도체 메모리
  - 내용기반 접근(Associative)
- ### 변경 용이성
  - 읽기 전용 : ROM
  - 읽기/쓰기 가능(Read/Writable) : RAM
  - 하이브리드 : Least-Write & Most-Read, EEProm, Flash
- ### 휘발성
  - 휘발성(Volatile) : 전원공급 중단시 데이터 훼손, RAM
  - 비휘발성 : 전원 공급이 중단되어 데이터 유지, ROM
  - 절충형 : 배터리 내장형 RAM, NVRAM(Non-volatile RAM)
- ### 프로그램 가능성(Programmability)
- OTP(One-Time Programmable) : Mask 프로그래밍(제조자 프로그래밍)
- MTP(Multiple-time Programmable) : 사용자 프로그래밍
## 2. 메모리 분류
- ### RAM(Random Access Memory)
  - 메모리에 대한 읽기쓰기가 모두가 가능한 메모리
  - 휘발성 메모리 : 전원 공급시 데이터 훼손
  - DRAM, SRAM, SDRAM, RDRAM, DDR SDRAM
- ### ROM(Read-Only Memory)
  - 메모리에 대한 읽기만 가능한 메모리
  - 비휘발성 메모리
  - EPROM, EEPROM, FLASH, NAND, NOR
## 2.1 메모리 유형과 특성

메모리 타입 | 분류 | 삭제
---------|----------|---------
 RAM | read-write memory | 전기적, 바이트 레벨
 MROM | read-only | 불가능
 PROM | read-only | 불가능
 EPROM | Read-mostly | UV-light, chip level
EEPROM | read-mostly | Electrically, byte level
Flash memory | read-mostly | Electrically, block-level
---
# Topic : RAM
## 1. RAM 개요
- ### 읽고 쓰기가 가능한 랜덤 액세스 메모리
  - 휘발성 메모리
  - 메인 메모리, 임시 저장장치로 사용
- ### RAM 유형
  - SRAM(Static RAM)
  - DRAM(Dynamic RAM)
## 2. SRAM
- ### 2진 값을 플립플롭을 사용하여 저장
- 전력이 공급되는 동안 저장된 값을 계속 유지
- ### 특성
  - 누설 전류가 없음 : 재충전 필요없음
  - 복잡한 구조 : 비트당 필요면적이 커서 집적도 떨어짐
  - 고비용, 고속.
- ### 캐시 메모리에 사용
## 3. DRAM
- ### DRAM
  - 캐패시터에 전하를 충전하는 방식으로 데이터를 저장
  - 충전된 전하량으로 논리레벨(0, 1을) 결정
- ### 특성
  - 충전된 전하의 누설
    - 전원이 공급된 상태에서도 재충전이 필요
      - 재충전 회로와 재충전 시간이 필요
  - 간단한 구조
    - 비트당 필요 면적이 적어 집적도가 높음
    - 집적도 향상->메모리 공간 확대->어드레스 라인 증가->입출력 핀 증가->패키지 크기 증가->제품크기 증가
  - 어드레스 다중화(멀티플렉싱) : 어드레스 핀 수 절약
    - RAS(Row Addr, Strobe)
    - CAS(Column Addr, Strobe)
  - 저비용, 저속
- ### 메인 메모리에 주로 사용
## 3.1 DRAM Timing
# ![noimage!](./컴구조/DRAM%ED%83%80%EC%9D%B4%EB%B0%8D.png)
## 4. 고성능 DRAM
- ### SDRAM(Synchronous DRAM)
- ### DDR(Double Data Rate DRAM)
- ### RDRAM(Rambus DRAM)
- ### CDRAM(Cache DRAM)
## 4.1 SDRAM
- ### 메모리 액세스가 큰 외부 클럭에 동기화
  - 큰 데이터 블록 전송에 최적
- ### SDRAM 특성
  - Burst mode 사용
    - 첫번째 액세스 이후, 어드레스 셋업 시간과 행, 열 라인의 pre-charge 시간을 절약할 수 있다.
  - Multiple-bank 구조
    - 2 또는 4 개 뱅크로 분리
    - 온-칩 병렬처리가능성 향상
  - Mode register 사용
    - SDRAM을 특정 용도로 특화 가능
    - burst type, burst length, nCAS latency를 제어할 수 있음
- ### 4.1.2 SDRAM 제어신호
  - 제어신호는 클럭의 rising edge에 동기
# ![noimage!](./컴구조/SDRAM읽기타이밍.png)
